
# ==== ZONE =====
# Custom akka configuration file.
# Overwrites the default applicaton.conf file name since this is used by spring.

akka {
  extensions = ["akka.cluster.client.ClusterClientReceptionist"]

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  akka-persistence-sql-async {
    journal.class = "akka.persistence.journal.sqlasync.MySQLAsyncWriteJournal"
    snapshot-store.class = "akka.persistence.snapshot.sqlasync.MySQLSnapshotStore"

    user = "bestia"
    password = "bestia"

    url = "jdbc:mysql://localhost/bestia"
    max-pool-size = 4
    wait-queue-capacity = 10000

    metadata-table-name = "akka_metadata"
    journal-table-name = "akka_journal"
    snapshot-table-name = "akka_snapshot"
  }

  cluster {
    # how long to wait for one of the seed nodes to reply to initial join request
    seed-node-timeout = 5s

    # If a join request fails it will be retried after this period.
    # Disable join retry by specifying "off".
    retry-unsuccessful-join-after = 10s

    # The roles of this member. List of strings, e.g. roles = ["A", "B"].
    # The roles are part of the membership information and can be used by
    # routers or other services to distribute work to certain member types,
    # e.g. front-end and back-end nodes.
    roles = ["zoneserver"]

    # Disable legacy metrics in akka-cluster.
    metrics.enabled = off
  }

  actor {
    provider = "cluster"

    # Serializes and deserializes (non-primitive) messages to ensure immutability,
    # this is only intended for testing.
    serialize-messages = off

    # Serializes and deserializes creators (in Props) to ensure that they can be
    # sent over the network, this is only intended for testing.
    # http://doc.akka.io/docs/akka/current/java/serialization.html#verification
    serialize-creators = off

    # TODO Change serializer in production.
    warn-about-java-serializer-usage = true
  }

  discovery {
    method = config
    config.services = {
      behemoth-local = {
        endpoints = [
          {
            host = "127.0.0.1"
            port = 8558
          }
        ]
      }
    }
  }

  management {
    http {
      hostname = "127.0.0.1"
    }
    cluster.bootstrap {
      contact-point-discovery {
        service-name = "behemoth-local"
        required-contact-point-nr = 1
      }
    }
  }

  remote {
    artery {
      enabled = on
      transport = tcp
      canonical.port = 2551
    }
  }
}